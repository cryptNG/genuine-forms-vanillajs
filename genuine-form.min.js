import {GenuineCaptcha as a} from'https://cryptng.github.io/genuine-captcha-vanillajs/genuine-captcha.min.js';const{isArray:b}=Array;export default class GenuineForm extends HTMLElement{secret=null;solution=null;isVerifiedCaptcha=!1;timerId=null;gfApiUrl=`https://genuine-forms.io/api/gf-send-dev/`;handleSendResponse=A=>console.log('Default handleSendResponse:',A);handleStartSending=async ()=>{};handleFinishedSending=async ()=>{};handleValidateForm=(_,B)=>e(_,B);handleValidationFailed=async ()=>{};handleInitialized=(c,C)=>console.log('Default handleInitialized:',c,C);generateSubjectAndBody=(_a,_b,_c='Generic Subject')=>({subject:_c,body:JSON.stringify(f(_b))});constructor(){super();this.name=this.getAttribute('name')||'genuine-form';this.subject=this.getAttribute('subject')||'Generic Subject';this._apiKey=this.getAttribute('api-key');this.receiver=this.getAttribute('receiver');this.gfApiUrl=this.getAttribute('api-url')||this.gfApiUrl;this.abortController=new AbortController;this.genuineCaptchaNode=null;this.events={on:(_A,E)=>{let aA=async (...aB)=>{try{await E(...aB)}catch(aC){console.error(`Error in ${_A} handler:`,aC)}};_A==='send-response'&&(this.handleSendResponse=aA);_A==='started-sending'&&(this.handleStartSending=aA);_A==='finished-sending'&&(this.handleFinishedSending=aA);_A==='validation-failed'&&(this.handleValidationFailed=aA)},off:aD=>{aD==='send-response'&&(this.handleSendResponse=aE=>console.log('Default handleSendResponse:',aE));aD==='started-sending'&&(this.handleStartSending=async ()=>{});aD==='finished-sending'&&(this.handleFinishedSending=async ()=>{});aD==='validation-failed'&&(this.handleValidationFailed=async ()=>{})}};!window.genuineForms&&(window.genuineForms={});let D=document.getElementById('genuine-form'),_C=document.createElement('style');if(!D){console.error('Template #genuine-form not found');return}let _B=D.content;this.attachShadow({mode:'open'});_C.textContent=`
          :host{
            --form-display:flex;
            --form-flex-direction:column;
            --form-gap:1rem;
            --form-padding:1rem;
            --form-border-radius:0.5rem;
            --form-border:1px solid #ccc;
            --form-background-color:transparent;
            --form-box-shadow:0 2px 4px rgba(0,0,0,0.1);
      
          }

          .genuine-form-container{
            display: var(--form-display);
            position: relative;
            flex-direction:  var(--form-flex-direction);
            gap: var(--form-gap);
            background-color:var(--form-background-color);
          }
      `;this.shadowRoot.appendChild(_C);this.shadowRoot.appendChild(_B.cloneNode(!0));this.setupCaptchaHandlerRegistry();this.hooksReady=Promise.all([this.registerHandleValidateForm(),this.registerGenerateSubjectAndBody(),this.registerHandleInitialized()])}setupCaptchaHandlerRegistry(){if(!window._genuineFormHandlers){window._genuineFormHandlers=new Map;let aF=window.genuineCaptchaHandleVerify;window.genuineCaptchaHandleVerify=(aG,aH,aI)=>{for(const aJ of window._genuineFormHandlers)aJ(aG,aH,aI);aF&&aF(aG,aH,aI)}}this.myHandleVerify=(aK,aL,aM)=>{aK===this.name&&(console.log('CAPTCHA verified for form:',aK),this.isVerifiedCaptcha=!0,this.solution=aL,this.secret=aM)};if(!window._genuineFormResetHandlers){window._genuineFormResetHandlers=new Map;let aN=window.genuineCaptchaReset;window.genuineCaptchaReset=aO=>{for(const aP of window._genuineFormResetHandlers)aP(aO);aN&&aN(aO)}}this.myHandleReset=aQ=>{aQ===this.name&&(console.log('CAPTCHA reset for form:',aQ),this.isVerifiedCaptcha=!1,this.solution='',this.secret='')}}connectedCallback(){window.genuineForms[this.name]=this.events;(async ()=>await this.handleInitialized(this.name,this))();window._genuineFormHandlers?.set(this.name,this.myHandleVerify);window._genuineFormResetHandlers?.set(this.name,this.myHandleReset);this.setupObserver=new MutationObserver(()=>{!this.submitButton&&this.setupSubmitButton();!this.genuineCaptchaNode&&this.findCaptchaNode()});this.setupObserver.observe(this,{childList:!0,subtree:!0});this.setupTimeout=setTimeout(async ()=>{this.setupSubmitButton();await this.setupCaptcha()},100)}disconnectedCallback(){this.setupTimeout&&(clearTimeout(this.setupTimeout),this.setupTimeout=null);this.timerId&&(clearTimeout(this.timerId),this.timerId=null);this.abortController&&(this.abortController.abort(),this.abortController=null);(this.submitButton&&this.submitHandler)&&(this.submitButton.removeEventListener('click',this.submitHandler),this.submitButton=null,this.submitHandler=null);this.setupObserver&&(this.setupObserver.disconnect(),this.setupObserver=null);window.genuineForms?.[this.name]&&delete window.genuineForms[this.name];window._genuineFormHandlers?.delete(this.name);window._genuineFormResetHandlers?.delete(this.name)}setupSubmitButton(){let aR=this.querySelectorAll('[type="submit"]');aR.length>1&&console.warn(`Multiple submit buttons found in genuine-form[name="${this.name}"], only the first one will be used.`);(aR[0]&&!this.submitButton)&&(this.submitButton=aR[0],this.submitHandler=aS=>{aS.preventDefault();aS.stopPropagation();if(!this.isValidForm){this.handleValidationFailed();return}this.sendForm(aS)},this.submitButton.addEventListener('click',this.submitHandler))}async setupCaptcha(){await this.findCaptchaNode();this.genuineCaptchaNode?this.genuineCaptchaNode.setAttribute('name',this.name):console.error(`Missing <genuine-captcha> web component in genuine-form[name="${this.name}"]`)}async findCaptchaNode(){return new Promise(aT=>{let aU=()=>{let aV=this.shadowRoot.querySelector('slot');if(!aV){aT(null);return}let aW=aV.assignedNodes();for(const aX of aW){if(aX.nodeName==='GENUINE-CAPTCHA'){this.genuineCaptchaNode=aX;aT(aX);return}if(aX.nodeType===Node.ELEMENT_NODE){let aY=aX.querySelector('genuine-captcha');if(aY){this.genuineCaptchaNode=aY;aT(aY);return}}}aT(null)};if(this.genuineCaptchaNode){aT(this.genuineCaptchaNode);return}aU();!this.genuineCaptchaNode&&setTimeout(()=>aU(),100)})}registerHandleValidateForm=async ()=>{let aZ=0;while(window.genuineFormHandleValidate===void 0&&aZ<150){aZ++;await d(100)}this.handleValidateForm=window.genuineFormHandleValidate||this.handleValidateForm};registerHandleInitialized=async ()=>{let bA=0;while(window.genuineFormHandleInitialized===void 0&&bA<150){bA++;await d(100)}this.handleInitialized=window.genuineFormHandleInitialized||this.handleInitialized};registerGenerateSubjectAndBody=async ()=>{let bB=0;while(window.genuineFormGenerateSubjectAndBody===void 0&&bB<150){bB++;await d(100)}this.generateSubjectAndBody=window.genuineFormGenerateSubjectAndBody||this.generateSubjectAndBody};get isValidForm(){return this.handleValidateForm(this.name,this)}static get observedAttributes(){return['subject','receiver','api-key','name','api-url']}attributeChangedCallback(bC,bD,bE){bC==='subject'&&(this.subject=bE);bC==='receiver'&&(this.receiver=bE);bC==='api-key'&&(this._apiKey=bE);bC==='api-url'&&(this.gfApiUrl=bE);bC==='name'&&(this.name=bE)}get apiKey(){return this._apiKey||this.receiver}sendForm=async bF=>{bF.preventDefault();if(this.isSending){console.log('Form submission already in progress');return}if(!this.isVerifiedCaptcha||!this.isValidForm||this.apiKey===''){console.log('Form not valid or Captcha not verified or no receiver/api-key set.');return}await this.hooksReady;const{subject:bG,body:bH}=this.generateSubjectAndBody(this.name,this,this.subject);if(bG.length>200){console.error('Subject too long (max 200 characters)');this.handleSendResponse({ok:!1,error:'Subject too long'});return}this.isSending=!0;this.setAttribute('data-sending','');this.submitButton&&(this.submitButton.disabled=!0);try{this.abortController?.abort();this.abortController=new AbortController;await this.handleStartSending();let bI=await fetch(this.gfApiUrl,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({captchaSolution:this.solution,captchaSecret:this.secret,apiKey:this.apiKey,subject:bG,body:bH}),signal:this.abortController.signal});if(bI.ok){let bJ=await bI.json();if(!bJ||typeof bJ!=='object')throw Error('Invalid response format');console.log('Success:',bJ.body||bJ);this.handleSendResponse({ok:!0,body:bJ.body||bJ});this.dispatchEvent(new CustomEvent('form-submit-success', {detail:{body:bJ.body||bJ},bubbles:!0,composed:!0}));this.resetForm()}else{let bK=await bI.text();this.handleSendResponse({ok:!1,error:`Server error: ${bI.status} - ${bK}`});this.dispatchEvent(new CustomEvent('form-submit-error', {detail:{error:`Server error: ${bI.status}`},bubbles:!0,composed:!0}))}}catch(bL){if(bL.name==='AbortError'){console.log('Form submission aborted');return}console.error('Error:',bL);this.handleSendResponse({ok:!1,error:bL.message||'Unknown error'});this.dispatchEvent(new CustomEvent('form-submit-error', {detail:{error:bL.message},bubbles:!0,composed:!0}))}finally{this.isSending=!1;this.removeAttribute('data-sending');this.submitButton&&(this.submitButton.disabled=!1);await this.handleFinishedSending()}};resetForm(){this.isVerifiedCaptcha=!1;this.solution=this.secret='';let bM=this.shadowRoot.querySelector('form');bM?.reset();(this.genuineCaptchaNode&&typeof this.genuineCaptchaNode.loadCaptcha==='function')&&this.genuineCaptchaNode.loadCaptcha()}}function d(bN){return new Promise(bO=>setTimeout(bO,bN))}if(typeof document!=='undefined')if(!customElements.get('genuine-form')){let bP=()=>{if(!document.getElementById('genuine-form')){let bQ=document.createElement('template');bQ.id='genuine-form';bQ.innerHTML=`<script type="module" src="https://cryptng.github.io/genuine-captcha-vanillajs/genuine-captcha.min.js" defer></script>
        <form class="genuine-form-container">
          <slot></slot>
        </form>`;document.body?document.body.prepend(bQ):document.addEventListener('DOMContentLoaded',()=>{(document.body&&!document.getElementById('genuine-form'))&&document.body.prepend(bQ)})}};document.readyState==='loading'?document.addEventListener('DOMContentLoaded',bP):bP();customElements.define('genuine-form',GenuineForm)}function e(bR,bS){let bT=bS.querySelectorAll('input, select, textarea');for(let bU of bT){if(!bU.required)continue;if(bU.tagName==='INPUT'){let bV=bU.type.toLowerCase();if(bV==='checkbox')if(!bU.checked)return!1;else if(bV==='radio'){let bW=bS.querySelectorAll(`input[type="radio"][name="${bU.name}"]`),bX=[...bW].some(bY=>bY.checked);if(!bX)return!1}else if(!bU.value.trim())return!1}else if(bU.tagName==='SELECT')if(bU.multiple)if(bU.selectedOptions.length===0)return!1;else if(!bU.value)return!1;else if(bU.tagName==='TEXTAREA')if(!bU.value.trim())return!1}return!0}function f(bZ){let cA={},cB=bZ.querySelectorAll('input, select, textarea');for(const cC of cB){let cD=cC.name;if(!cD)continue;let cE;if(cC.tagName==='INPUT')if(cC.type==='checkbox')cE=cC.checked;else if(cC.type==='radio')if(cC.checked)cE=cC.value;else continue;else cE=cC.value;else if(cC.tagName==='SELECT')cC.multiple?cE=[...cC.selectedOptions].map(opt=>opt.value):cE=cC.value;else cE=cC.value;if(cA.hasOwnProperty(cD)){!b(cA[cD])&&(cA[cD]=[cA[cD]]);cA[cD].push(cE)}else cA[cD]=cE}return cA}export{GenuineForm};
